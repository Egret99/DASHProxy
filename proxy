#!/usr/bin/env python3.10
import xml.etree.ElementTree as ET
from socket import *
import threading
import sys
import time

# Utility functions

def calculate_current_throughput(t1, t2, size, alpha, currentThroughput):
    newThroughput = size*1.0/(t2-t1)
    currentThroughput = alpha*newThroughput + (1-alpha)*currentThroughput
    return (currentThroughput, newThroughput)

def get_bitrates(manifestFile, bitrates):
    while bitrates:
        bitrates.pop()
    
    root = ET.fromstring("\n".join(manifestFile.split("\n")[2:]))
    for representation in root.find("{urn:mpeg:dash:schema:mpd:2011}Period").find("{urn:mpeg:dash:schema:mpd:2011}AdaptationSet").findall("{urn:mpeg:dash:schema:mpd:2011}Representation"):
        bitrates.append(int(representation.get("bandwidth")))

def find_bitrate(bitrates, currentThroughput):
    biggest_bitrate = bitrates[0]
    for bitrate in bitrates:
        if bitrate > biggest_bitrate and bitrate*1.5 <= currentThroughput:
            biggest_bitrate = bitrate
    
    return biggest_bitrate

def transform_uri(uri, bitrate):
    paths = uri[1:].split("/")
    paths[0] = paths[0].split("_")[0] + "_" + str(bitrate) + "bps"
    return "/"+"/".join(paths)

# Connection functions

def receive_request(connectionSocket):
    request = connectionSocket.recv(2048).decode()

    if not request:
        # client is disconnected and raise an error
        raise error('Client disconnected')

    uri = request.split("\n")[0].split(" ")[1]
    receive_time = time.time()

    return (request, uri, receive_time)

def connect_to_server(proxyIp, serverIp, listeningPort):
    sendingSocket = socket(AF_INET,SOCK_STREAM)
    try:
        sendingSocket.bind((proxyIp, listeningPort+1))
    except error as e:
        print(e)
    sendingSocket.connect((serverIp, 8080))

    return sendingSocket

def receive_file(sendingSocket):
    response = sendingSocket.recv(2048)

    if not response:
        # server is disconnected and raise an error)
        raise error('Server disconnected')
    
    print("Receiving file")
    headers, body = response.split(b"\r\n\r\n")
    file_chunks = [body]
    current_file_length = len(body)
    total_file_length = current_file_length
    
    for header in headers.decode().split("\r\n"):
        if header[:14] == "Content-Length":
            total_file_length = int(header[16:])
    
    while current_file_length < total_file_length:
        file_chunks.append(sendingSocket.recv(2048))
        current_file_length += len(file_chunks[-1])

    return (headers, file_chunks, total_file_length, time.time())

def request_file(sendingSocket, uri, request):
    requestParameters = request.split("\n")
    requestParameters[0] = requestParameters[0].split(" ")
    requestParameters[0][1] = uri
    requestParameters[0] = " ".join(requestParameters[0])
    
    sendingSocket.send("\n".join(requestParameters).encode())
    
    print("Requesting file", uri, "from server")
    return receive_file(sendingSocket)

def return_file_to_client(connectionSocket, response_headers, file_chunks):
    response = response_headers + b"\r\n\r\n" + b"".join(file_chunks)
    connectionSocket.send(response)

def handle_communication(connectionSocket, proxyIp, serverIp, listeningPort, alpha, logName, bitrates):
    currentThroughput = 0
    bitrate = 0

    # connect to server
    try:
        sendingSocket = connect_to_server(proxyIp, serverIp, listeningPort)
    except error as e:
        print("Cannot connect to server:", e)
        print("Closing connection with client")
        connectionSocket.close()
        return

    while True:
        try:
            request, uri, t1 = receive_request(connectionSocket)
            # get bitrates by hardcode if cache is allowed
            # manifestFile = "".join(file.decode() for file in request_file(sendingSocket, "/BigBuckBunny_6s.mpd", request)[1])
            # bitrates = get_bitrates(manifestFile)

            if uri[-3:] == "mpd":
                uri_new = uri.split(".")[0] + "_nolist.mpd"
                response_headers, file_chunks, size, t2 = request_file(sendingSocket, uri_new, request)
                return_file_to_client(connectionSocket, response_headers, file_chunks)

                # Get the correct manifest file and bitrates & also set initial throughput
                manifestFile = "".join(file.decode() for file in request_file(sendingSocket, uri, request)[1])
                get_bitrates(manifestFile, bitrates)

                currentThroughput = min(bitrates)
                bitrate = currentThroughput
            elif uri[-3:] == "m4s":
                if currentThroughput != min(bitrates): # tell if we already have some samples of throughputs
                    # if no samples, we use smallest bitrate
                    # else we find new bitrate
                    bitrate = find_bitrate(bitrates, currentThroughput) 
                
                uri_new = transform_uri(uri, bitrate) # transform uri based on bitrate
                response_headers, file_chunks, size, t2 = request_file(sendingSocket, uri_new, request)
                return_file_to_client(connectionSocket, response_headers, file_chunks)
                currentThroughput, sampleThroughput = calculate_current_throughput(t1, t2, size, alpha, currentThroughput)
                
                try:
                    logFile = open(logName, "a")
                    logFile.write(" ".join(str(stat) for stat in (t2, t2-t1, currentThroughput, sampleThroughput, bitrate, serverIp, uri_new))+"\n")
                    logFile.close()
                except error as e:
                    print("Cannot open log file", logName)

            else: # requesting html or other files other than manifest file and video
                response_headers, file_chunks, size, t2 = request_file(sendingSocket, uri, request)
                return_file_to_client(connectionSocket, response_headers, file_chunks)

        except error as e:
            # When error --> one is disconnected
            print(e)
            print("Closing connection with client and server.")
            connectionSocket.close()
            sendingSocket.close()
            break

if __name__ == "__main__":
    logName, alpha, listeningPort, proxyIp, serverIp = sys.argv[1:]
    listeningPort = int(listeningPort) ## port number specified as a command line argument
    alpha = float(alpha)
    bitrates = []
    
    listeningSocket = socket(AF_INET,SOCK_STREAM)# listening socket
    
    try:
        listeningSocket.bind(('', listeningPort))
    except error as e:
        print(e)
        
    listeningSocket.listen(1000)
    print("The proxy is ready to receive on port", listeningPort)

    while True:
        connectionSocket, addr = listeningSocket.accept()
        subThread = threading.Thread(target = handle_communication, args = (connectionSocket, proxyIp, serverIp, listeningPort, alpha, logName, bitrates))
        subThread.start()